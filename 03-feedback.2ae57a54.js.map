{"mappings":"qhBAUA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACTC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,SAC9BE,SAAUH,SAASC,cAAc,aAG/BG,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,yBAA2B,CACpEC,MAAO,GACPC,QAAS,IAGbZ,EAAKI,MAAMS,MAAQP,EAAKK,MACxBX,EAAKK,SAASQ,MAAQP,EAAKM,QAE3BZ,EAAKC,KAAKa,iBAAiB,QAASC,EAAAjB,EAAA,EAGpC,SAAiBkB,GACgB,UAA1BA,EAAMC,OAAOC,WACZZ,EAAKK,MAAQK,EAAMC,OAAOJ,OAGD,aAA1BG,EAAMC,OAAOC,WACZZ,EAAKM,QAAUI,EAAMC,OAAOJ,OAGhCJ,aAAaU,QAAQ,sBAAuBZ,KAAKa,UAAUd,G,GAZT,MACtDN,EAAKC,KAAKa,iBAAiB,UAc3B,SAAkBE,GACdA,EAAMK,iBAEN,MACIC,UAAUX,MAACA,EAAKC,QAAEA,IAClBI,EAAMO,cAEJC,EAAW,CACbb,MAAOA,EAAME,MACbD,QAASA,EAAQC,OAGF,KAAhBF,EAAME,OAAkC,KAAlBD,EAAQC,OAC7BY,MAAM,2CAGVC,QAAQC,IAAIH,GACZR,EAAMO,cAAcK,QACpBnB,aAAaoB,WAAW,sB","sources":["src/js/03-feedback.js"],"sourcesContent":["\n// 1. Відстежуй на формі подію input, і щоразу записуй у локальне сховище об'єкт з полями email і message, у яких зберігай поточні значення полів форми. Нехай ключем для сховища буде рядок \"feedback-form-state\".\n// 2. Під час завантаження сторінки перевіряй стан сховища, і якщо там є збережені дані, заповнюй ними поля форми. В іншому випадку поля повинні бути порожніми.\n// 3. Під час сабміту форми очищуй сховище і поля форми, а також виводь у консоль об'єкт з полями email, message та їхніми поточними значеннями.\n// 4. Зроби так, щоб сховище оновлювалось не частіше, ніж раз на 500 мілісекунд. Для цього додай до проекту і використовуй бібліотеку lodash.throttle.\n\n\n// \"доброго вечора, у таску 8-3 якщо не заповнене одне або інше поле сабміт не робимо, а показуємо альорт, як у дз 6 таск 8\n// дз приймаю, але із дз 9 чекаю підправлену 8-3\"\n\nimport throttle from 'lodash/throttle';\n\nconst refs = {\n    form: document.querySelector('form'),\n    input: document.querySelector('input'),\n    textarea: document.querySelector('textarea'),\n};\n\nconst data = JSON.parse(localStorage.getItem('feedback-form-state')) || {          \n    email: '',\n    message: '',\n};\n\nrefs.input.value = data.email;\nrefs.textarea.value = data.message;\n\nrefs.form.addEventListener(\"input\", throttle(onInput, 500));\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onInput(event){\n    if(event.target.nodeName === 'INPUT'){\n        data.email = event.target.value;\n    }\n\n    if(event.target.nodeName === 'TEXTAREA'){\n        data.message = event.target.value;\n    }\n\n    localStorage.setItem('feedback-form-state', JSON.stringify(data)); \n}\n\nfunction onSubmit(event){\n    event.preventDefault();\n\n    const {\n        elements: {email, message},\n    } = event.currentTarget;\n\n    const userInfo = {\n        email: email.value,\n        message: message.value,\n    };\n\n    if(email.value === \"\" || message.value === \"\"){\n        alert(\"Don't be lazy, fill up all the fields !\");\n    }\n\n    console.log(userInfo);\n    event.currentTarget.reset();\n    localStorage.removeItem('feedback-form-state');\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["$8zd4h","parcelRequire","$945622fd0f572e60$var$refs","form","document","querySelector","input","textarea","$945622fd0f572e60$var$data","JSON","parse","localStorage","getItem","email","message","value","addEventListener","$parcel$interopDefault","event","target","nodeName","setItem","stringify","preventDefault","elements","currentTarget","userInfo","alert","console","log","reset","removeItem"],"version":3,"file":"03-feedback.2ae57a54.js.map"}